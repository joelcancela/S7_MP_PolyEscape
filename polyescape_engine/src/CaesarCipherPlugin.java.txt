import org.json.JSONObject;
import polytech.teamf.events.BadResponseEvent;
import polytech.teamf.events.GoodResponseEvent;
import polytech.teamf.events.IEvent;
import polytech.teamf.plugins.Plugin;
import polytech.teamf.services.Service;

import java.util.HashMap;
import java.util.Map;

public class CaesarCipherPlugin extends Plugin {

	/**
	 * The original plain text. Is used by the validation process.
	 */
	private String plain_text = "";

	/**
	 * Caesar Service Handle
	 */
	private Service caesar;

	/**
	 * Initializes the plugin
	 *
	 * @param description    The plugin description
	 * @param plain_text     The plain text to discover
	 * @param cipher_padding The cipher padding used by the algorithm to shift letters
	 */
	public CaesarCipherPlugin(String description, String plain_text, Integer cipher_padding) {

		super("CaesarCipherPlugin",description);

		// SERVICES
		this.caesar = this.invokeService("CaesarCipherService");

		// INNER MODEL
		this.plain_text = plain_text.toUpperCase();

		// SHARED MODEL
		this.putAttribute("description", getAttributes().get("description") + " Voici le code à décrypter: "+toCaesar(plain_text.toUpperCase(), cipher_padding));
	}

	@Override
	public IEvent execute(Map<String, Object> args) throws Exception {

		if (!args.containsKey("attempt")) {
			throw new IllegalArgumentException("Bad response format");
		}

		String response = (String) args.get("attempt");
		response = response.toUpperCase();

		if (this.plain_text.equalsIgnoreCase(response)) {
			return new GoodResponseEvent(this);
		}
		return new BadResponseEvent(this);
	}

	private String toCaesar(String plain_text, int cipher_padding) {
		Map<String,Object> args = new HashMap<>();
		args.put("message",plain_text);
		args.put("shift",cipher_padding);
		JSONObject response = new JSONObject(caesar.call(args));
		return response.getString("result");
	}

	@Override
	public void onBadResponseEvent() {

	}

	@Override
	public void onGoodResponseEvent() {

	}


	@Override
	public void onStartEvent() {

	}

	@Override
	public void onEndEvent() {

	}

}